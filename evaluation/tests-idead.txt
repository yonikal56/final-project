Guide points:
- add expected
- set option for the pass in all test automatically

Tests ideas:
1. multiplication of n >= 2 integers is some value - sat
2. like 1 but all different from the result and 1
3. like 2 but all different from each other
4. like 1 but for a prime number
5. like 2 but for a prime number

more:
1. multiplication of 2/more variables equals to one of them
2. the same but with the others different from the result
3. x|y and y|z => x|z


TODO:
-x|y and y|z => x|z


1. exists n different numbers with the same prime factors
2. exists n different numbers with the same number prime factors
3. exists 2 numbers with the same gcd and not lcm
4. 2 equal number with different number of prime factors - unsat

5. random number of x, random number of const, random number of asserts - random of each size and random - =/!=

divisor - operator (other operations idea from BAG kinds - after!)



Nelson-OpPen - add support of +, -, and >=,<=,>,< - convert sides to bag.to.int. grep "QF_NIA"


"the number of prime factors of x is k"

----->

declare-fun f: Int -> Int
forall i. i>= k . f(i)=0
forall i. 0<= i < k. f(i) is prime
forall i,j. 0 <=i,j <k . f(i) != f(j)
forall y. y is prime and y|x then exists i. 0 <= i < k /\ f(i) = y


"the prime factors of x = the prime factors of y"

--->

declare-fun f: Int -> Int
declare-fun g: Int -> Int
exists k s.t num of factors f = k (also for g)
and forall 0 <= i < k f(i) = g(i)

declare-fun f: Int -> Int
declare-fun g: Int -> Int
forall i. i>= k . f(i)=0 (also for g)
forall i. 0<= i < k. f(i) is prime (also for g)
forall i,j. 0 <=i,j <k . f(i) != f(j) (also for g)
forall z. z is prime and y|x then exists i. 0 <= i < k /\ f(i) = z (also for g)
forall i. 0 <= i < k . f(i)=g(i)