; COMMAND-LINE: --solve-int-as-bag
; EXPECT: unsat
(set-logic ALL)
(set-info :status unsat)
(set-option :incremental false)
(declare-fun x0 () Int)
(declare-fun x1 () Int)
(assert (>= x0 1))
(assert (>= x1 1))
(assert (= x0 x1))

(define-fun is.prime2 ((x Int)) Bool
(forall ((i Int))
(=>
(and (> i 0) (exists ((j Int)) (and (> j 0) (= x (* i j)))))
(or (= x i) (= i 1))))
)
(define-fun divisor ((a Int) (b Int)) Bool
(exists ((k Int)) (= b (* a k))))

(declare-fun numfactors0 () Int)
(declare-fun numfactors1 () Int)
(declare-fun ffactorsx0 (Int) Int)
(declare-fun ffactorsx1 (Int) Int)
(assert (= 0 (ffactorsx0 numfactors0)))
(assert (= 0 (ffactorsx1 numfactors1)))
(assert (forall ((i Int))
(=> (and (<= 0 i) (< i numfactors0))
(is.prime2 (ffactorsx0 i)))
))
(assert (forall ((i Int))
(=> (and (<= 0 i) (< i numfactors1))
(is.prime2 (ffactorsx1 i)))
))
(assert (forall ((i Int) (j Int))
(=> (and (<= 0 i) (< i numfactors0) (<= 0 j) (< j numfactors0)
(distinct i j)) (distinct (ffactorsx0 i) (ffactorsx0 j)))
))
(assert (forall ((i Int) (j Int))
(=> (and (<= 0 i) (< i numfactors1) (<= 0 j) (< j numfactors1)
(distinct i j)) (distinct (ffactorsx1 i) (ffactorsx1 j)))
))
(assert (forall ((y Int))
(=> (and (> y 1) (<= y x0) (is.prime2 y) (divisor y x0))
(exists ((i Int)) (and (<= 0 i) (< i numfactors0) (= y (ffactorsx0 i)))))))
(assert (forall ((y Int))
(=> (and (> y 1) (<= y x1) (is.prime2 y) (divisor y x1))
(exists ((i Int)) (and (<= 0 i) (< i numfactors1) (= y (ffactorsx1 i)))))))
(assert (distinct numfactors0 numfactors1))

(check-sat)