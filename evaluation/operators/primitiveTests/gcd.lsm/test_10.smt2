; COMMAND-LINE: --cegqi-all --nl-ext-tplanes
; EXPECT: sat
(set-logic ALL)
(set-info :status sat)
(set-option :incremental false)
(declare-fun x0 () Int)
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x4 () Int)
(declare-fun x5 () Int)
(declare-fun x6 () Int)
(declare-fun x7 () Int)
(declare-fun x8 () Int)
(declare-fun x9 () Int)
(assert (>= x0 1))
(assert (>= x1 1))
(assert (>= x2 1))
(assert (>= x3 1))
(assert (>= x4 1))
(assert (>= x5 1))
(assert (>= x6 1))
(assert (>= x7 1))
(assert (>= x8 1))
(assert (>= x9 1))
(assert (distinct x0 x1 x2 x3 x4 x5 x6 x7 x8 x9))
(define-fun divisor ((a Int) (b Int)) Bool
(exists ((k Int)) (= b (* a k))))
(define-fun is.a.gcd ((a Int) (b Int) (c Int)) Bool
(and (divisor a b) (and (divisor a c) 
(forall ((x Int)) (=> (and (divisor x b) (divisor x c)) (<= x a))))))
(define-fun is.a.lcm ((a Int) (b Int) (c Int)) Bool
(exists ((k Int)) (and (is.a.gcd k b c) (= a (/ (* b c) k)))))
(declare-fun xgcd_x0_x1 () Int)
(declare-fun xlcm_x0_x1 () Int)
(assert (is.a.gcd xgcd_x0_x1 x0 x1))
(assert (is.a.lcm xgcd_x0_x1 x0 x1))
(declare-fun xgcd_x2_x3 () Int)
(declare-fun xlcm_x2_x3 () Int)
(assert (is.a.gcd xgcd_x2_x3 x2 x3))
(assert (is.a.lcm xgcd_x2_x3 x2 x3))
(declare-fun xgcd_x4_x5 () Int)
(declare-fun xlcm_x4_x5 () Int)
(assert (is.a.gcd xgcd_x4_x5 x4 x5))
(assert (is.a.lcm xgcd_x4_x5 x4 x5))
(declare-fun xgcd_x6_x7 () Int)
(declare-fun xlcm_x6_x7 () Int)
(assert (is.a.gcd xgcd_x6_x7 x6 x7))
(assert (is.a.lcm xgcd_x6_x7 x6 x7))
(declare-fun xgcd_x8_x9 () Int)
(declare-fun xlcm_x8_x9 () Int)
(assert (is.a.gcd xgcd_x8_x9 x8 x9))
(assert (is.a.lcm xgcd_x8_x9 x8 x9))
(check-sat)
